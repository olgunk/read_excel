package pdf;

import reader.ReadExcel;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Date;
import java.util.List;
import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import org.w3c.dom.Text;

import reader.ReadExcel;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Header;

import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Image;

public class createpdf {
  private static String FILE = "c:/temp/storeMate_Rossmann_GS1-MHD-Verfall_Codes.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);
private static Object stamper;

  public static void main(String[] args) {
    try {
      ReadExcel excelTabelle = new ReadExcel();
      excelTabelle.setInputFile("C:\\Dokumente und Einstellungen\\okutrag\\Desktop\\Barcode\\BarcodeLi.xls");
      excelTabelle.read();
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document);
      document.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  // iText allows to add metadata to the PDF which can be viewed in your Adobe
  // Reader
  // under File -> Properties
  private static void addMetaData(Document document) {
    document.addTitle("Artikelcodes mit MHD und Verfallsdatum");
    document.addAuthor("Olgun Katrag");
    document.addCreator("Olgun Katrag");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Artikelcodes mit MHD und Verfallsdatum", catFont));
    
    

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    
   // addEmptyLine(preface, 8);

   
    document.add(preface);
    // Start a new page
    document.newPage();
    
    
  }

  private static void addContent(Document document) throws DocumentException,IOException {

	  Image header_image = Image.getInstance("C:\\Dokumente und Einstellungen\\okutrag\\Desktop\\Barcode\\MIT ZINT\\Kopf.png");
	  header_image.setAlignment(Image.MIDDLE);
	  header_image.scalePercent(50);
	  document.add(header_image);

	  
	  document.add(new Paragraph("Artikel nur mit Mindesthaltbarkeitsdatum (MHD)",catFont));
	  
	  int count = getImageCount();
	  String productHeader = getProductHeader();
	  String[] productHeader_geteilt = productHeader.split(";");
	  int neueseite=1;
	  for (int i = 2; i<=count+1; i++) {
		  document.add(new Paragraph(productHeader_geteilt[i]));
		  //document.add( Chunk.NEWLINE );
	   	  Image barcode2 = Image.getInstance("c:\\olguns\\Barodes"+ i +".png");
	      barcode2.setAlignment(Image.LEFT);
		  barcode2.scalePercent(25);
		  document.add(barcode2);
		  document.add( Chunk.NEWLINE );
		  document.add( Chunk.NEWLINE );
		  //document.add( Chunk.NEWLINE );
		  if (i != count-1) {
			  if (neueseite % 5 == 0) {
				  //document.newPage();
				  document.add(header_image);
			  }
		  }
		  neueseite+=1;
		  
	  }


	  
//	  Chunk chunk = new Chunk(header_image, 0, -45);
//	  Header header = new Header(new Phrase(chunk), false);
//	  header.setAlignment(Element.ALIGN_CENTER);
//	  header.setBorder(Rectangle.NO_BORDER);
//	  document.setHeader(header);


	  
	  
    
    // Add a table
    //Image image1 = Image.getInstance("c:\\olguns\\Barodes2.png");
    //image1.setAlignment(Image.LEFT);
    //image1.scaleAbsoluteHeight(5);e
    //image1.scaleAbsoluteWidth(5);
    //image1.scalePercent(80);
   // catPart.add(image1);

  }
  
  public static int getImageCount() throws IOException {
	  int count=0;
	  ReadExcel excelTabelle = new ReadExcel();
	  excelTabelle.setInputFile("C:\\Dokumente und Einstellungen\\okutrag\\Desktop\\Barcode\\BarcodeLi.xls");
	  Sheet sheet = excelTabelle.excselinhalt();
	  Cell temp;
	  String barcode = "";
	  for (int y = 2; y < 22; y++) {
	     	 System.out.println("");
	       for (int x = 1; x < 6; x++) {
	    	   temp = sheet.getCell(x, y);
	    	   barcode = barcode + temp.getContents();     
	       }
	       count+=1;
	  }
	  return count;
	  
	    
  }
  
  
  
  public static String getProductHeader() throws IOException {
	  ReadExcel excelTabelle = new ReadExcel();
	  excelTabelle.setInputFile("C:\\Dokumente und Einstellungen\\okutrag\\Desktop\\Barcode\\BarcodeLi.xls");
	  Sheet sheet = excelTabelle.excselinhalt();
	  Cell temp;
	  String barcode = "";
	  for (int y = 0; y < 22; y++) {
	     	 System.out.println("");
	       for (int x = 0; x < 1; x++) { //nein
	    	   temp = sheet.getCell(x, y);
	    	   barcode = barcode + temp.getContents()+";";     
	       }
	   
	  }
	  return barcode;
  }



 private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(""));
    }
  }
} 
